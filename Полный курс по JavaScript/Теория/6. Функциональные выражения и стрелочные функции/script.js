// ФУНКЦИОНАЛЬНЫЕ ВЫРАЖЕНИЯ

// Функциональные выражения ВСЕГДА анонимные (имя у них отсутствует)

/**
 * Функциональные выражения:
 * Не имеет имя.
 * Нельзя использовать автономно (нельзя написать функциональное выражение где угодно).
 * 
 * Можно присваивать переменной.
 * Можно использовать как аргумент в вызове другой функции (могут быть колбэк функциями) - используется чаще всего. 
 */

// Присваивание функционального выражения перменной

const myFunction = function (a,b){
   let c
   a += 1
   c = a + b
   return c
}

myFunction(5, 3) // 9

// Функциональное выражение в вызове другой функции

setTimeout(function(){
   console.log('Отложенное сообщение')
}, 1000)


// СТРЕЛОЧНЫЕ ФУНКЦИИ

// Стрелочная функция - выражение. Также они ВСЕГДА  анонимные

/*
(a, b) => { // Имени нет 
   let c
   a+=1
   c = a + b
   return c
}
*/

const myFunction2 = (a,b) => {
   let c
   a += 1
   c = a + b
   return c
}

myFunction2(5, 3) // 9

setTimeout(() => {
   console.log('Отложенное сообщение')
}, 1000)

// Сокращение в стрелочных функциях

a => { // Если ОДИН параметр, то курглые скобки можно опустить
   //тело функции
}

(a, b) => a + b 
/**
 * Фигурные скобки можно опустить, если тело функции состоит из ОДНОГО выражения.
 * В этом случае стрелочная функция НЕЯВНО возврщает резльтат выражения (автоматически вернёт результат выражения a + b).
 */


// ЗНАЧЕНИЯ ПАРАМЕТРОВ ФУНКЦИИ ПО УМОЛЧАНИЮ

// Пример 1

function multyByFactor(value, multiplier = 1){ // Если нет 2 параметра, то multiplier будет равен 1
   return value * multiplier
}

multyByFactor(10, 2) // 20
multyByFactor(5) // 5

const multyByFactor2 = function (value, multiplier = 1 ) {
   return value * multiplier
} 

const multyByFactor3 = (value, multiplier = 1 ) => {
   return value * multiplier
}

const multyByFactor4 = (value, multiplier = 1 ) => value * multiplier

// Пример 2

const newPost = (post, addedAT = Date()) => ({ // Этот объект возвращаем НЕЯВНО, значит используем (). Если написать без () - то JS интерпритатор подумает, что начнётся тело функции. { - формуруем создание нового объекта. } - заканчивается формирование объекта. 
   ...post,
   addedAT,
})

const firstPost = {
   id: 1,
   author: 'Roman',
}

console.log(newPost(firstPost))
