//Циклы 

/*
Цикл в JavaScript (да и во всех прочих языках) — это блок кода, который повторяет сам себя, пока известное условие остаётся истинным. Условие — это всё, что программа проверяет, перед каждым перезапуском цикла. Всякий раз, пока условие остается «правкой», код будет циклично перезапускаться. Как только условие «правкой» быть перестанет (то есть станет «ложкой») — прекратится и цикл 
*/

//Самый обыкновенный while
/*
let i = 0;
while (i < 10){
   console.log("Счётчик показывает " + i + ". Давайте добавим ещё 1.");
   i++;
}
console.log("Всё!");

function akomCubes (totalCubes){
   const akom = 10;
   console.log("On the floor " + totalCubes + " cubes");
   while(totalCubes > 0){
      totalCubes -=akom;
      console.log("I put in the box " + akom + " cubs. So and left cubes on the floor " + totalCubes)
   }
}
let totalCubes = 320;

akomCubes(totalCubes);

*/

//Цикл for

/*
1. Объявлем переменную.
2. Задаём условие, которое интерпретатор будет проверять перед каждой итерацией цикла (чтобы определить, а стоит ли вообще запускать код по новой). Итерацией называют один виток цикла (например, если у нас было 10 циклов запуска, то можно сказать, что имели место 10 итераций кода).
3. Третьей частью нашего кода является инкремент (или же декремент). Он запускается в конце каждой итерации, чтобы всякий раз менять нашу переменную.

for(let i = 0; i<10; i++){
   console.log('i = ' + i);
}

console.log('End');

function посчитаемКа(крайнееЧисло) {
   const всеЧисла = []; // создаём пустой массив
   for (let i = 0; i < крайнееЧисло; i++) {
   всеЧисла.push(i + 1); // добавляем 1, 2, 3... и так далее — в массив
   }
   console.log(всеЧисла.join(', '));
  }
  посчитаемКа (300); 

  function случайныеНомераДляЛотереи(всегоНомеров, минЗначение, 
   максЗначение) {
   for (let i = 0; i < всегоНомеров; i++) {
   console.log(Math.floor(Math.random() * максЗначение) + 
   минЗначение);
   }
  }
  случайныеНомераДляЛотереи(6, 1, 20);
  случайныеНомераДляЛотереи(6, 1, 20); 
  
  const готовимПеченьки = [
   'Разогрейте духовку до 175 градусов',
   'Смешайте маргарин, белый сахар, тёмный сахар, ваниль и яйца',
   'Засыпьте муку, крахмал, соль, соду и шоколадную крошку',
   'Выложите на противень',
   'Оставьте в духовке на 12 минут',
   'Достаньте противень',
   'Приятного аппетита!'
  ];
  for (let i = 1; i <= готовимПеченьки.length; i++) {
   console.log( i + '. ' + готовимПеченьки[i-1]);
  }
*/

function заспойлерить(мойФильм){
   const фильмы = [
   'Властелин колец',
   'Шрек',
   'История игрушек',
   'Звёздные войны',
   'Холодное сердце',
   'Гамлет',
   'Золушка'
   ];
   const спойлеры = [
   'Кольцо Всевластья уничтожено.',
   'Фиона осталась огром.',
   "Базз Лайтер всё‑таки осознал, что он — игрушка.",
   'Звезда Смерти взорвана.',
   'Эльза перестала разрушать всё вокруг.',
   'Все умерли.',
   'И жили они долго и счастливо.'
   ];
   
   for(let i = 0; i < фильмы.length; i++){
      if(фильмы[i] === мойФильм){
         return console.log(спойлеры[i]);
      }
   }
   
   return console.log("К сожелению, этого фильма нет в списке");
};
заспойлерить('Шрек');

//ВИКТОРИНА
/*
1. Как называется блок кода, повторяющий себя снова и снова, пока заданное условие не перестанет быть истинным? //цикл
2. Что следует добавить на место прочерка в следующем коде?
let i = 0;
_____ (i < 5) { //while
   console.log(i);
   i++;} 
3. Какой из двух операторов цикла, которые обсуждались в главе, является более популярным? //for
4. Если ______ //условие всегда будет оставаться истинным, то код может застрять в бесконечном ______//цикле.
5. Сколько сообщений выдаст в консоль следующий код?
const номера = [1, 2, 3, 5, 6];
for (let j = 0; j < номера.length; j++) {
 console.log(j + ' => ' + номера[j]); // 5
} 
6. Когда при написании кода некоторое решение обусловлено не практическими или техническими соображениями, но условленными нормами, мы называем это ____________ // Соглашением о стандартах оформления кода. 
7. Сколько сообщений выдаст в консоль следующий код?
let k = 0;
while (k < 7) {
 console.log('ещё строчка!'); //бесконечно
}
8. При помощи какого символа отделяются друг от друга находящиеся в скобках части цикла for? (;;) 
9. Как называется средняя из трёх заключённых в скобки частей цикла for? //условие
10. Будет ли в результате запуска следующего кода выведено в консоль какое‑нибудь сообщение? Если нет — почему? Если да — какое? (Дайте ответ до проверки в консоли!)
const топ40Хитов = [
   'Hey Jude', 
   'Billie Jean', 
   'Imagine', 
   'Hotel Calif.'
];
for (let m = 1; m <= топ40Хитов.length; m++) {
 if (топ40Хитов[m] === 'Танец маленьких утят') {
 console.log('Достойный выбор!');
 } else if (топ40Хитов[m] === undefined) { //Да, это
 console.log('Какая ошибка!');
 } else if (топ40Хитов[m] === 'Hey Jude') {
 console.log("О! Слона‑то я и не приметил!"); 
 }
} 
11. Сколько сообщений выдаст в консоль следующий код? //18 раз
const максЗначение = 17;
let n = 0;
while (n <= максЗначение) {
 console.log('Посчитаем! ' + n);
 n++;
}
12. Назовите термин, которым обозначается единичное прохождение цикла? //Итерация
13. Что следует добавить на место прочерка в следующем коде?
const шляпы = ['ковбойская', 'котелок', 'колпак', 'цилиндр'];
for (let p = 0; p < __________________ //шляпы.length; p++) {
 console.log(шляпы[p] + ' — вот что я бы хотел носить!');
}
*/

//Мегакомплексный обзор
/*
1. Вот операторы _____ //сравнения, которые мы используем: ===, !==, >, >=, < и <=.
2. Если в качестве условия используется не строго булево значение, то в случаях, 
когда оно расценивается как true, мы называем такое значение _____//правкой, а когда 
false — _______//ложкой.
3. Истина/Ложь: логические операторы всегда возвращают булевы значения. //Ложь
4. Что означает DRY (принцип сухости) применительно к программированию? //Избегать повторений (Don't Repeat Yourself), писать как можно более "сухой" и локоничный код.
5. Истина/Ложь: когда происходит вычисление значения вложенной функции, интерпретатор сперва вычисляет значение внутренней, а затем внешней функции. //Истина
6. При помощи какого кода вы можете получить случайное число в диапазоне от 0 до 40? math.random()*40; 
7. Что показывает длина (.length) массива? А .length строки? //Количество элементов в массиве / количество символов в строке.
8. Выполняет ли следующий код замысел разработчика (и если нет — почему)? const часовВСутках = 24; //Да
9. __________ //индекс элемента в массиве — это номер, под которым данный элемент «записан» в этом массиве.
10. Истина/Ложь: при работе с блоком комментариев интерпретатор JavaScript будет игнорировать всё находящееся от /* и до /*. // до (* /)
11. При помощи какого встроенного метода можно добавлять элементы в конец массива? //.push('новый элемент');
12. Назовите примитивный тип данных, значением которого является то, что никакого значения присвоено не было. //undefined
13. Каким термином называют последовательное выполнение одного метода за другим, указанных в одной и той же строчке кода? //цепочка
14. Каким общепринятым стилем пользуется большинство разработчиков для написания имён переменных? //campleCase
15. Истина/Ложь: при запуске строчки мойМассив.join('\n') будет выдана строка, перечисляющая все элементы массива, разделённые переносом. //Истина
16. Является ли следующий код правильным (и если нет — почему)?
const сегодняВыступают = 'Трёхколёсный Сыр';
сегодняВыступают = "Сал Монелла и Тан Дыр"; //Нет. Нельзя сменить значение у переменной, объявленной с const 
17. Чем следует заполнить пропуски, чтобы код генерировал случайные значения из элементов массива?
const пожитьБыВХолоде = ['Антарктике', 'Северном полюсе', 'Канаде'];
const случайныйИндекс = Math._____//floor(Math.______//random() * пожитьБыВХолоде.______length);
const холодноеМестечко = пожитьБыВХолоде[случайныйИндекс];
console.log('Если уж решил поселиться в ' + холодноеМестечко + ', то тебе стоит запастись хорошим пуховиком!');
18. Какой результат рассчитывает получить разработчик, используя оператор modulo? // Остаток (при целочисленном делении).
19. Дайте ответ, прежде чем проверите его в консоли: каков будет результат запуска следующего кода?
['Я', 'Ю', 'Ь', 'Э'].toString().toLowerCase().split(',').sort()[1]; //э
20. Назовите значение переменной мобильноеУстройство после запуска следующей строчки:
const мобильноеУстройство = 'смартфон' || ('планшет' && 'карманный компьютер (КПК)'); //undefined (смартфон) - ???
21. Назовите значение переменной немобильноеУстройство после запуска следующей строчки:
const немобильноеУстройство = 'ТВ' && ('ноутбук' || 'стационарный комп'); //undefined (ноутбук) - ???
22. Назовите два способа, которыми можно было бы сократить (то есть упростить) следующую строчку:
счётКомандыПротивника = счётКомандыПротивника + 1; //...+=1
23. Каким оператором стоит воспользоваться, чтобы узнать, делится ли некое число нацело на 5? //%
24. Истина/Ложь: сообщения об ошибках предназначены для людей, чтобы, ознакомившись с таковым, разработчики смогли найти решение проблемы. //истина
25. Какой оператор сравнения вернёт в ответе false, если обнаружит, что значение справа меньше или равно значению слева? // <
26. Истина/Ложь: после запуска следующего кода длина (.length) массива вагоныПоезда будет 5. //Ложь
const вагоныПоезда = ['головной', 'грузовой'];
вагоныПоезда.push(['пассажирский', 'багажный', 'тормозной']); 
27. При помощи какой встроенной функции можно округлить десятичную дробь до ближайшего целого? //Math.floor()
28. Какое значение имеет одиночный знак равенства? //присваивание
29. При помощи какого сочетания клавиш можно выполнить перенос строки в консоли? //shift+enter
30. Истина/Ложь: разработчики зачастую не используют функции alert(), confirm() и prompt(), поскольку они замораживают код в ожидании действия пользователя. //Истина
31. Истина/Ложь: функция confirm() всегда возвращает булево значение. //Истина
32. Назовите три ключевых слова, при помощи которых можно объявить новую переменную; какое из них вы, вероятно, будете использовать наиболее часто, а какое, возможно, никогда? //const, let, var
33. Если ___________ //условие всегда будет оставаться истинным, то код может застрять в бесконечном ___________//цикле.
34. Каким образом можно создать новую строчку в консоли (а также в сообщениях для функций alert(), confirm() и prompt())? //"\n";
35. Когда при написании кода некоторое решение оправдано не практическими или техническими соображениями, но условленными нормами, мы называем это ___________. //Соглашением о стандартах оформления кода. 
36. Так же как и операторы сравнения, _______//логические операторы (&&, || и !) прекрасно работают с условными выражениями.
37. Назовите термин, которым обозначается единичное прохождение цикла. //Итерация
38. Является ли следующий код правильным (проверьте в консоли!), и если нет — почему?
function достаточноЛиДенег(вКошельке) {
 const цена = 10.30;
 if ( вКошельке > цена) { //не хватает = (>=)
 console.log('Вам хватит денег!');
 } else {
 console.log("Боюсь, вы не можете себе этого позволить!");
 }
}
достаточноЛиДенег(10.30);
39. Сколько сообщений вернётся в консоль после запуска следующего кода? //бесконечно
let x = 10;
while (x > 0) {
 console.log('значение x равно ' + x);
 x++;
} 
40. Является ли следующий код правильным (и если нет — почему?):
function сократитьДо3Знаков(число) {
 return число; //после него ничего не запуститься
 const точноЧисло = число.toFixed(3);
 console.log('Более точная сумма = $' + точноеЧисло);
 return точноеЧисло;
}
сократитьДо3Знаков(25.98765); 
41. Сколько сообщений вернётся в консоль после запуска следующего кода? //4
const цвета = ['красный', 'жёлтый', 'синий', 'оранжевый', 'зелёный', 'фиолетовый'];
for (let i = 0; i < цвета.length; i++) {
 const цвет = цвета [i];
 if (цвет.length >= 7) {
 console.log(цвет);
 }
}
42. Истина/Ложь: !!('умный' && 'красивый'); //Истина
43. Назовите термин, обозначающий код, в котором все функции и переменные обладают «говорящими» названиями (благодаря чему разработчику предельно просто взаимодействовать с написанным таким образом кодом). //Самодокументированный код
44. Перед «правкой» он вернёт false, а перед «ложкой» — true? /! 
45. Истина/Ложь: операторы сравнения всегда возвращают булевы значения. //Истина
46. null, false, ' ', 0 и undefined являются _______ //ложкой; а true, 'строка' и 1 — ______//правкой.
 */